// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: company.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (
    company_name
) VALUES (
  $1
)
RETURNING id, company_name
`

func (q *Queries) CreateCompany(ctx context.Context, companyName string) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, companyName)
	var i Company
	err := row.Scan(&i.ID, &i.CompanyName)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, company_name FROM company
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(&i.ID, &i.CompanyName)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, company_name FROM company
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.CompanyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE company
SET company_name = $2
WHERE id = $1
`

type UpdateCompanyParams struct {
	ID          int32
	CompanyName string
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, updateCompany, arg.ID, arg.CompanyName)
	return err
}
