// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: employee.sql

package db

import (
	"context"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee (
  name, company_id
) VALUES (
  $1, $2
)
RETURNING id, name, company_id
`

type CreateEmployeeParams struct {
	Name      string
	CompanyID int32
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee, arg.Name, arg.CompanyID)
	var i Employee
	err := row.Scan(&i.ID, &i.Name, &i.CompanyID)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, name, company_id FROM employee
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id int32) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(&i.ID, &i.Name, &i.CompanyID)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, name, company_id FROM employee
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEmployeesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEmployees(ctx context.Context, arg ListEmployeesParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(&i.ID, &i.Name, &i.CompanyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employee
SET name = $2
WHERE id = $1
`

type UpdateEmployeeParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployee, arg.ID, arg.Name)
	return err
}
